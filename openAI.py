import os
from dotenv import load_dotenv
from pinecone import Pinecone, ServerlessSpec
import ollama  # –ü–æ–¥–∫–ª—é—á–∞–µ–º Ollama

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_ENVIRONMENT = os.getenv("PINECONE_ENVIRONMENT", "us-east-1")

if not PINECONE_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: PINECONE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone
pc = Pinecone(api_key=PINECONE_API_KEY)
index_name = "cource"

if index_name not in pc.list_indexes().names():
    print(f"‚ùå –ò–Ω–¥–µ–∫—Å '{index_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")
    pc.create_index(
        name=index_name,
        dimension=768,
        metric="cosine",
        spec=ServerlessSpec(cloud="aws", region=PINECONE_ENVIRONMENT)
    )

index = pc.Index(index_name)

# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞
chat_history = []
last_course_title = None  # –ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –∫—É—Ä—Å–∞

def check_courses_exist():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫—É—Ä—Å—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        response = index.describe_index_stats()
        total_vectors = response.get("total_vector_count", 0)
        return total_vectors > 0
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—É—Ä—Å–æ–≤: {e}")
        return False

def get_embedding(text):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ Ollama."""
    try:
        response = ollama.embeddings(model="nomic-embed-text", prompt=text)
        return response.get("embedding", None)
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return None

def find_course_by_title(title):
    """–ò—â–µ—Ç –∫—É—Ä—Å –≤ Pinecone –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Å –±–µ–∑–æ–ø–∞—Å–Ω—ã–º –¥–æ—Å—Ç—É–ø–æ–º –∫ –¥–∞–Ω–Ω—ã–º."""
    try:
        vector = get_embedding(title)
        if not vector:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–∞."
        results = index.query(vector=vector, top_k=1, include_metadata=True)
        print("–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Pinecone —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–º:", vector)

        matches = results.get("matches", [])
        if matches and len(matches) > 0:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π
            metadata = matches[0].get("metadata", {})
            return metadata.get("details", "‚ùå –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ –∫—É—Ä—Å–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return "‚ùå –¢–∞–∫–æ–π –∫—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ."
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫—É—Ä—Å–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫—É—Ä—Å–∞."


def get_course_info(query):
    """–ò—â–µ—Ç –∫—É—Ä—Å—ã –≤ Pinecone –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–≤—è–∑–Ω—ã–π –æ—Ç–≤–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É—è –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞."""
    global chat_history, last_course_title

    try:
        print(f"üîµ –ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}")

        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ä–æ–±–Ω–µ–µ, –∏—â–µ–º –¥–µ—Ç–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∫—É—Ä—Å–∞
        if "–ø–æ–¥—Ä–æ–±–Ω–µ–µ" in query.lower() or "—Ä–∞—Å—Å–∫–∞–∂–∏ –±–æ–ª—å—à–µ" in query.lower():
            if last_course_title:
                return find_course_by_title(last_course_title)
            else:
                return "‚ùå –ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å, –æ –∫–∞–∫–æ–º –∫—É—Ä—Å–µ –∏–¥–µ—Ç —Ä–µ—á—å. –£—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫—É—Ä—Å–æ–≤ –≤ –±–∞–∑–µ
        if not check_courses_exist():
            return "‚ùå –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç –∫—É—Ä—Å–æ–≤."

        vector = get_embedding(query)
        if not vector:
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞."

        results = index.query(vector=vector, top_k=13, include_metadata=True)

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
        matches = results.get("matches", [])
        if not matches:
            return "‚ùå –í –±–∞–∑–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤."

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤
        context_parts = []
        for match in matches:
            metadata = match.get("metadata", {})
            title = metadata.get("title")
            description = metadata.get("description")
            if not title or not description:
                print(f"‚ö† –ü—Ä–æ–ø—É—â–µ–Ω –∫—É—Ä—Å, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è: {match}")
                continue
            context_parts.append(f"–ù–∞–∑–≤–∞–Ω–∏–µ: {title}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}")

        context = "\n\n".join(context_parts)
        if not context:
            return "‚ùå –ö—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π."

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫—É—Ä—Å–∞ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–∏—Ö —É—Ç–æ—á–Ω–µ–Ω–∏–π
        if len(matches) > 0:
            first_metadata = matches[0].get("metadata", {})
            last_course_title = first_metadata.get("title", None)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        chat_history.append({"role": "user", "content": query})
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞
        prompt = f"""
        –¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ IT-–∫—É—Ä—Å–∞–º –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞—Ö–æ–¥–∏—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã.

        üîπ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å: "{query}"
        üîπ –ù–∏–∂–µ –ø—Ä–∏–≤–µ–¥–µ–Ω—ã –∫—É—Ä—Å—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:
        {context}
        
        –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ –∫—É—Ä—Å–∞—Ö –≤—Å–µ—Ö —Ç–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–∏ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –≤—Å–µ.
        
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ—Å—Ç–∞–≤—å –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞, –≥–¥–µ –∫–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç:
        - –ù–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞
        - –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∫—É—Ä—Å–∞ (–∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—á–µ–Ω—å —Ç–µ–º –∏–ª–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤)

        –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫—É—Ä—Å–æ–≤ –Ω–µ—Ç, —É—Ç–æ—á–Ω–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ–Ω –∏—â–µ—Ç.

        üö® **–ü—Ä–∞–≤–∏–ª–∞:**
        1. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–≤–µ–¥—ë–Ω–Ω—ã—Ö –∫—É—Ä—Å–æ–≤.
        2. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        3. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """
        print(prompt)
        messages = [{"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ IT-–∫—É—Ä—Å–∞–º."}]
        messages.extend(chat_history[-10:])
        messages.append({"role": "user", "content": prompt})

        response = ollama.chat(model="llama3", messages=messages)

        if not response or "message" not in response or "content" not in response["message"]:
            return "‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI."

        chat_history.append({"role": "assistant", "content": response["message"]["content"]})
        return response["message"]["content"]

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤ get_course_info: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."
