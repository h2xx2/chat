import requests
import os
from dotenv import load_dotenv
from pinecone import Pinecone, ServerlessSpec
from openai import OpenAI

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY")
PINECONE_API_KEY = os.getenv("PINECONE_API_KEY")
PINECONE_ENVIRONMENT = os.getenv("PINECONE_ENVIRONMENT", "us-east-1")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ API-–∫–ª—é—á–∏
if not DEEPSEEK_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è DEEPSEEK_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!")
if not PINECONE_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è PINECONE_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env!")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pinecone
pc = Pinecone(api_key=PINECONE_API_KEY)
print("üîµ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω–¥–µ–∫—Å—ã –≤ Pinecone:", pc.list_indexes().names())

index_name = "course"

# –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
if index_name not in pc.list_indexes().names():
    print(f"‚ùå –ò–Ω–¥–µ–∫—Å '{index_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π...")
    pc.create_index(
        name=index_name,
        dimension=1536,
        metric="cosine",
        spec=ServerlessSpec(cloud="aws", region=PINECONE_ENVIRONMENT)
    )

index = pc.Index(index_name)

# –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI —Å –≤–∞—à–∏–º DeepSeek API –∫–ª—é—á–æ–º
client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url="https://api.deepseek.com")

def get_embedding(text):
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥ —á–µ—Ä–µ–∑ DeepSeek."""
    try:
        print(f"üîµ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text}")
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "user", "content": text}
            ],
            stream=False
        )
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥
        if 'choices' in response:
            embedding = response['choices'][0]['message']['content']
            print(f"üîµ –ü–æ–ª—É—á–µ–Ω —ç–º–±–µ–¥–¥–∏–Ω–≥: {embedding}")
            return embedding
        else:
            raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {response}")
    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {e}")
        return None

def get_course_info(query):
    """–ò—â–µ—Ç –ø–æ—Ö–æ–∂–∏–µ –∫—É—Ä—Å—ã –≤ Pinecone –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –∏—Ö –≤ DeepSeek."""
    try:
        print(f"üîµ –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ get_course_info —Å –∑–∞–ø—Ä–æ—Å–æ–º: {query}")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        vector = get_embedding(query)

        if vector is None:
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —ç–º–±–µ–¥–¥–∏–Ω–≥."

        # –ó–∞–ø—Ä–æ—Å –∫ Pinecone –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö –∫—É—Ä—Å–æ–≤
        results = index.query(vector, top_k=3, include_metadata=True)

        context = "\n\n".join([  # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {match['id']}\n–û–ø–∏—Å–∞–Ω–∏–µ: {match['metadata']['description']}"
            for match in results.get("matches", [])
        ])

        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è DeepSeek
        prompt = f"""
        –¢—ã ‚Äî –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –æ–±—É—á–µ–Ω–∏—é. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç: "{query}". 
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –∫—É—Ä—Å–æ–≤, –æ—Ç–≤–µ—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–µ–∑–Ω–æ:

        {context}

        –ï—Å–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –∫—É—Ä—Å–∞ –Ω–µ—Ç, –ø—Ä–µ–¥–ª–æ–∂–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ IT.
        """

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ DeepSeek
        response = client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ IT-–∫—É—Ä—Å–∞–º."},
                {"role": "user", "content": prompt}
            ],
            stream=False
        )

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞
        print("üîµ –û—Ç–≤–µ—Ç –æ—Ç DeepSeek (—á–∞—Ç):", response)

        if "choices" in response:
            return response["choices"][0]["message"]["content"]
        else:
            raise ValueError(f"‚ùå –û—à–∏–±–∫–∞ –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç DeepSeek: {response}")

    except Exception as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ –≤ get_course_info: {e}")
        return "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞."


# –ü—Ä–∏–º–µ—Ä –≤—ã–∑–æ–≤–∞
if __name__ == "__main__":
    query = "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –∫—É—Ä—Å–∞—Ö"
    response = get_course_info(query)
    print(f"–û—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å: {response}")
